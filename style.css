* {
  margin: 0;
  padding: 0; /*preenchimento interno*/
  box-sizing: border-box;
  /*OBS
  
  com o boder-box é possível manter o width mesmo com acressimo de outras tags tipo padding, que acrescenta preenchimento interno*/
}

:root {
  --text-color: white; /*letras brancas*/
  --bg-url: url(./assets/bg-mobile-dark.png); /*fundo preto*/
  --stroke-color: rgba(255, 255, 255, 0.5);
  --surface-color: rgba(255, 255, 255, 0.05);
  --surface-color-hover: rgba(255, 255, 255, 0.02);
  --highlight-color: rgba(255, 255, 255, 0.2);
  --switch-bg-url: url(./assets/MoonStars.svg);
}

.light {
  --text-color: black; /*letras pretas*/
  --bg-url: url(./assets/bg-mobile-light.jpg); /*fundo branco*/
  --stroke-color: rgba(0, 0, 0, 0.5);
  --surface-color: rgba(0, 0, 0, 0.05);
  --surface-color-hover: rgba(0, 0, 0, 0.02);
  --highlight-color: rgba(0, 0, 0, 0.1);
  --switch-bg-url: url(./assets/sun.svg);
}

body {
  background: var(--bg-url) no-repeat top center/cover;
  height: 100vh;
}
/*OBS
O DE CIMA É O SHORHAND DISSO:
  background-image: url(./assets/Background.png);
  background-repeat: no-repeat;
  background-position: top center;
  background-size: cover;
}*/

body * {
  font-family: "Inter", sans-serif;
  color: var(--text-color);
}

#container {
  width: 100%;
  max-width: 588px; /*aqui foi adicionado uma largura máxima para esticar as box dos links, elas ficando no tamanho 100%, e quando chegar em 588px mantém.*/
  margin: 56px auto 0px;
  padding: 0 24px;
}

#profile {
  text-align: center;
  margin-top: 24px;
}

/*profile*/
#profile img {
  width: 112px;
  animation: changeAvatar 1s ease-in-out; /* Use a duração e o tipo de animação desejados */
}

#profile p {
  font-weight: 400;
  line-height: 24px;
  margin-top: 8px;
  margin-bottom: 28px;
}

/*switch*/
#switch {
  width: 64px;
  height: 24px;

  position: relative;
  /*OBS
  aqui serve para vincular (relativizar) o que estiver dentro do botão, fazendo com que o position absolute esteja relativo ao elemento switch, e assim as propriedade top, right, left e bottom não fiquem vinculadar a toda a página mas sim a box do switch */
  margin: 4px auto;
}

#switch button {
  width: 32px;
  height: 32px;
  background: white var(--switch-bg-url) no-repeat center;
  border: 0;
  border-radius: 50%;

  position: absolute;
  z-index: 1;
  left: 0; /*mudei aqui para left- posição do switch lua*/
  transform: translateY(-50%);
  top: 50%;
  animation: slide-back 0.2s;

  /*OBS
  Nesse caso, top: 50%; move o botão para 50% da altura do elemento #switch. No entanto, para centralizá-lo completamente, você usa transform: translateY(-50%); para ajustar o botão para cima em 50% da sua própria altura, o que efetivamente centraliza verticalmente o botão em relação ao elemento #switch.
  Portanto, o top: 50%; é usado para definir a posição inicial e o transform: translateY(-50%); é usado para fazer o ajuste necessário para centralização vertical completa. Isso mantém o botão no centro vertical do elemento #switch.*/
}

.light #switch button {
  animation: slide-in 0.4s forwards;
  /*left: initial; /*aqui serve para definir o switch left como a maneira inicial, mas foi trocado pelo "animaton*/
}
switch button:hover {
}

#switch span {
  display: flex;
  width: 64px;
  height: 24px;

  border: 1px solid var(--stroke-color);
  background: var(--surface-color);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border-radius: 9999px;
}

/*Links*/
ul {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 16px;
  padding: 24px 0;
}

ul li a {
  display: flex;
  align-items: center;
  justify-content: center;

  padding: 16px 24px;

  background: var(--surface-color);
  border: 1px solid var(--stroke-color);
  border-radius: 8px;

  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);

  text-decoration: none;
  font-weight: 400; /*acima de 500 usa o bold*/

  transition: background 0.2s;
}

/*Pseudo-selector(aplica coisas quando passa o mouse em cima)*/
ul li a:hover {
  background: var(--surface-color-hover);
  border: 1px solid var(--text-color);
}

/*social-links*/

#social-links {
  font-size: 24px;
  display: flex;
  padding: 16px;
  align-items: center;
  justify-content: center;
}

#social-links a {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 16px;
}

#social-links a:hover {
  background: var(--highlight-color);
  padding: 16px;
  border-radius: 50%;
  transition: background 0.2s;
}

/*frase final*/
footer {
  text-align: center;
  padding: 24px 0;
  font-size: 14px;
  font-weight: 300;
}

/*media queries*/
/*OBS:
 media queries so funciona quando há a linha meta "name="viewpor"" no index, que faz a adaptação do conteúdo pela meta de viewport
 
 As "at-rules" (regras @) são instruções especiais no CSS que começam com o símbolo "@" seguido de um identificador. Elas são usadas para definir configurações globais, regras condicionais e outras funcionalidades especiais no CSS. Existem várias "at-rules" diferentes em CSS, mas aqui estão algumas das mais comuns:

@media: Usado para criar regras condicionais que se aplicam apenas quando determinadas condições de mídia são atendidas, como tamanhos de tela específicos. 
*/
@media (min-width: 700px) {
  /*aqui lê-se que "de 700px pra cima serão adotadas as regras a seguir"*/
  :root {
    --bg-url: url(./assets/bg-desktop.jpg);
  }

  .light {
    --bg-url: url(./assets/bg-desktop-light.jpg);
  }
}

/*animation*/
@keyframes slide-in {
  from {
    left: 0;
  }
  to {
    left: 50%;
  }
}

@keyframes slide-back {
  from {
    left: 50%;
  }

  to {
    left: 0%;
  }
}

@keyframes fade-out {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes fade-in {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

.avatar-transition {
  animation: fade-in 0.3s ease-in-out; /* Duração e função de temporização da transição */
  animation-fill-mode: both; /* Mantém o estado final da animação */
  opacity: 1; /* Define a opacidade inicial */
}
